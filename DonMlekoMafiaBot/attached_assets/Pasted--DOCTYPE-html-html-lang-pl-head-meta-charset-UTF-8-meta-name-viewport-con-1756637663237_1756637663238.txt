<!DOCTYPE html>
<html lang="pl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>üêÑ Don Mleko Mafia RPG</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            font-family: 'Courier New', monospace;
            background: url('background.png') no-repeat center center fixed;
            background-size: cover;
            overflow: hidden;
            user-select: none;
            touch-action: none;
        }
        canvas {
            display: block;
            background: url('favicon.png') no-repeat center center;
            background-size: cover;
            border: 2px solid #8b4513;
            cursor: crosshair;
        }
        .game-container {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            position: relative;
        }
        .ui-overlay {
            position: absolute;
            top: 10px;
            left: 10px;
            z-index: 100;
            background: rgba(0,0,0,0.8);
            padding: 15px;
            border-radius: 10px;
            border: 2px solid #8b4513;
            color: white;
            font-size: 16px;
        }
        .shop-overlay {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0,0,0,0.9);
            padding: 30px;
            border-radius: 15px;
            border: 3px solid #8b4513;
            z-index: 200;
            display: none;
            max-width: 500px;
            color: white;
            pointer-events: auto;
        }
        .shop-item {
            background: rgba(44, 24, 16, 0.8);
            padding: 15px;
            margin: 15px 0;
            border-radius: 10px;
            border: 1px solid #8b4513;
            display: flex;
            justify-content: space-between;
            align-items: center;
            transition: all 0.3s;
            cursor: pointer;
        }
        .shop-item:hover {
            border-color: #ffcc00;
            transform: scale(1.02);
        }
        .shop-item.unavailable {
            opacity: 0.5;
            cursor: not-allowed;
            background: rgba(44, 24, 16, 0.4);
        }
        .shop-item img {
            width: 40px;
            height: 40px;
            margin-right: 15px;
        }
        .shop-item-info {
            display: flex;
            flex-direction: column;
        }
        .shop-item-name {
            font-weight: bold;
            font-size: 18px;
            margin-bottom: 5px;
        }
        .shop-item-desc {
            font-size: 14px;
            color: #ccc;
        }
        .start-screen {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
            background: rgba(0,0,0,0.9);
            padding: 40px;
            border-radius: 20px;
            border: 3px solid #8b4513;
            z-index: 300;
            max-width: 600px;
            color: white;
        }
        .nickname-screen {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
            background: rgba(0,0,0,0.9);
            padding: 40px;
            border-radius: 20px;
            border: 3px solid #8b4513;
            z-index: 300;
            display: none;
            max-width: 500px;
            color: white;
        }
        .highscore-screen {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
            background: rgba(0,0,0,0.9);
            padding: 40px;
            border-radius: 20px;
            border: 3px solid #8b4513;
            z-index: 300;
            display: none;
            max-width: 600px;
            color: white;
            width: 80%;
        }
        .game-over-screen {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
            background: rgba(139, 0, 0, 0.9);
            padding: 40px;
            border-radius: 20px;
            border: 3px solid #8b4513;
            z-index: 300;
            display: none;
            max-width: 500px;
            color: white;
            width: 80%;
        }
        .level-up-screen {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
            background: rgba(0, 139, 0, 0.9);
            padding: 40px;
            border-radius: 20px;
            border: 3px solid #8b4513;
            z-index: 300;
            display: none;
            max-width: 500px;
            color: white;
            width: 80%;
        }
        .boss-screen {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
            background: rgba(139, 0, 0, 0.9);
            padding: 40px;
            border-radius: 20px;
            border: 3px solid #8b4513;
            z-index: 300;
            display: none;
            max-width: 500px;
            color: white;
            width: 80%;
        }
        .boss-screen2 {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
            background: rgba(139, 0, 0, 0.9);
            padding: 40px;
            border-radius: 20px;
            border: 3px solid #8b4513;
            z-index: 300;
            display: none;
            max-width: 500px;
            color: white;
            width: 80%;
        }
        .controls {
            position: absolute;
            bottom: 10px;
            left: 10px;
            background: rgba(0,0,0,0.8);
            padding: 10px 15px;
            border-radius: 10px;
            border: 2px solid #8b4513;
            color: white;
            font-size: 14px;
            box-shadow: 0 0 10px rgba(0,0,0,0.5);
        }
        .item-counter {
            position: absolute;
            top: 10px;
            right: 10px;
            background: rgba(0,0,0,0.8);
            padding: 10px 15px;
            border-radius: 10px;
            border: 2px solid #8b4513;
            color: white;
            font-size: 14px;
            box-shadow: 0 0 10px rgba(0,0,0,0.5);
        }
        .item-counter-title, .controls-title {
            font-weight: bold;
            margin-bottom: 5px;
            text-align: center;
            color: #ffcc00;
        }
        .item-counter-list, .controls-list {
            margin: 0;
            padding-left: 0;
            list-style-type: none;
            text-align: left;
        }
        .item-counter-list li, .controls-list li {
            margin: 3px 0;
            padding-left: 15px;
            position: relative;
        }
        .item-counter-list li::before {
            content: "‚Ä¢";
            color: #ffcc00;
            position: absolute;
            left: 0;
        }
        .controls-list li::before {
            content: "‚Ä¢";
            color: #ffcc00;
            position: absolute;
            left: 0;
        }
        .highscore-table {
            margin: 20px auto;
            text-align: left;
            width: 100%;
            border-collapse: collapse;
            box-shadow: 0 0 20px rgba(0,0,0,0.5);
        }
        .highscore-table th, .highscore-table td {
            padding: 10px;
            border-bottom: 1px solid #444;
        }
        .highscore-table th {
            background-color: #8b4513;
            color: white;
            font-weight: bold;
            text-align: center;
        }
        .highscore-table tr:nth-child(even) {
            background: rgba(44, 24, 16, 0.6);
        }
        .highscore-entry.current {
            background: rgba(74, 44, 16, 0.8) !important; /* !important to override nth-child */
            border-color: #ffcc00;
        }
        .highscore-rank {
            font-weight: bold;
            color: #ffcc00;
            width: 30px;
            text-align: center;
        }
        .highscore-name {
            flex-grow: 1;
            margin: 0 10px;
        }
        .highscore-score {
            font-weight: bold;
        }
        .highscore-date {
            color: #aaa;
            font-size: 12px;
        }
        .game-message {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0,0,0,0.8);
            padding: 20px;
            border-radius: 10px;
            color: white;
            font-size: 24px;
            z-index: 150;
            display: none;
            box-shadow: 0 0 20px rgba(0,0,0,0.7);
        }
        /* Paski ≈ºycia i do≈õwiadczenia */
        .health-bar {
            width: 150px;
            height: 15px;
            background: #333;
            border-radius: 7px;
            margin-top: 5px;
            overflow: hidden;
        }
        .health-fill {
            height: 100%;
            background: linear-gradient(to right, #ff0000, #ff6600);
            transition: width 0.3s;
        }
        .exp-bar {
            width: 150px;
            height: 15px;
            background: #333;
            border-radius: 7px;
            margin-top: 5px;
            overflow: hidden;
        }
        .exp-fill {
            height: 100%;
            background: linear-gradient(to right, #ffcc00, #ff9900);
            transition: width 0.3s;
        }
        /* Mobile specific styles */
        @media (max-width: 768px) {
            .ui-overlay, .item-counter, .controls {
                font-size: 12px;
                padding: 8px;
                border-radius: 8px;
            }
            .health-bar, .exp-bar {
                width: 150px;
                height: 15px;
            }
            .shop-overlay, .start-screen, .nickname-screen, .highscore-screen, .game-over-screen, .level-up-screen, .boss-screen, .boss-screen2 {
                padding: 20px;
                border-radius: 10px;
                width: 95%;
            }
            button {
                padding: 10px 20px;
                font-size: 16px;
            }
            input {
                padding: 10px;
                font-size: 16px;
            }
            h1 {
                font-size: 28px;
            }
            .game-message {
                font-size: 18px;
                padding: 15px;
            }
        }
    </style>
</head>
<body>
    <div class="game-container">
        <canvas id="gameCanvas" width="1200" height="800"></canvas>
        <div class="loading-screen" id="loadingScreen">
            ≈Åadowanie zasob√≥w... <span id="loadingProgress">0%</span>
        </div>
        <div class="ui-overlay">
            <h3>üêÑ <span id="playerNick">Don Mleko</span></h3>
            <div>‚ù§Ô∏è ≈ªycie: <span id="health">100</span>/100</div>
            <div class="health-bar">
                <div class="health-fill" id="healthBar" style="width: 100%"></div>
            </div>
            <div>‚≠ê Poziom: <span id="level">1</span></div>
            <div>‚ú® EXP: <span id="exp">0</span>/<span id="expToNext">100</span></div>
            <div class="exp-bar">
                <div class="exp-fill" id="expBar" style="width: 0%"></div>
            </div>
            <div>üí∞ DMT: <span id="money">0</span></div>
            <div>üéØ Etap: <span id="stage">1</span></div>
            <div>üî´ Bro≈Ñ: <span id="weapon">Pistolet</span></div>
            <div>üèÜ Wynik: <span id="score">0</span></div>
            <button onclick="toggleShop()">üõí Sklep</button>
        </div>
        <div class="shop-overlay" id="shopOverlay">
            <h2>üõí Sklep Mafijny</h2>
            <div class="shop-item" id="rifleItem" onclick="buyItem('rifle', 200)">
                <img src="https://placehold.co/40x40/FF6600/FFFFFF?text=R" alt="Karabin">
                <div class="shop-item-info">
                    <div class="shop-item-name">üî´ Karabin (Damage +10)</div>
                    <div class="shop-item-desc">Zwiƒôksza obra≈ºenia o 10 punkt√≥w</div>
                </div>
                <button>Kup za 200 DMT</button>
            </div>
            <div class="shop-item" id="shotgunItem" onclick="buyItem('shotgun', 400)">
                <img src="https://placehold.co/40x40/FF6600/FFFFFF?text=S" alt="Shotgun">
                <div class="shop-item-info">
                    <div class="shop-item-name">üí• Shotgun (Damage +20)</div>
                    <div class="shop-item-desc">Zwiƒôksza obra≈ºenia o 20 punkt√≥w</div>
                </div>
                <button>Kup za 400 DMT</button>
            </div>
            <div class="shop-item" id="autoaimItem" onclick="buyItem('autoaim', 500)">
                <img src="https://placehold.co/40x40/00FF00/000000?text=AA" alt="Auto-Aim">
                <div class="shop-item-info">
                    <div class="shop-item-name">üéØ Auto-Aim (Strza≈Çy do celu)</div>
                    <div class="shop-item-desc">Automatycznie celuje w najbli≈ºszego wroga</div>
                </div>
                <button>Kup za 500 DMT</button>
            </div>
            <div class="shop-item" id="healthItem" onclick="buyItem('health', 100)">
                <img src="https://placehold.co/30x30/FF0000/FFFFFF?text=HP" alt="Apteczka">
                <div class="shop-item-info">
                    <div class="shop-item-name">‚ù§Ô∏è Apteczka (+50 HP)</div>
                    <div class="shop-item-desc">Przywraca 50 punkt√≥w ≈ºycia</div>
                </div>
                <button>Kup za 100 DMT</button>
            </div>
            <div class="shop-item" id="speedItem" onclick="buyItem('speed', 300)">
                <img src="https://placehold.co/40x40/00FFFF/000000?text=SP" alt="Szybsze Strza≈Çy">
                <div class="shop-item-info">
                    <div class="shop-item-name">‚ö° Szybsze Strza≈Çy</div>
                    <div class="shop-item-desc">Zmniejsza czas miƒôdzy strza≈Çami o 50ms</div>
                </div>
                <button>Kup za 300 DMT</button>
            </div>
            <div class="shop-item" id="thompsonItem" onclick="buyItem('thompson', 2000)">
                <img src="https://placehold.co/40x40/FF0000/FFFFFF?text=T" alt="Thompson">
                <div class="shop-item-info">
                    <div class="shop-item-name">üî´ Thompson (Damage +50)</div>
                    <div class="shop-item-desc">Zwiƒôksza obra≈ºenia o 50 punkt√≥w</div>
                </div>
                <button>Kup za 2000 DMT</button>
            </div>
            <div class="shop-item" id="collectItem" onclick="buyItem('collect', 2500)">
                <img src="https://placehold.co/40x40/FF00FF/000000?text=C" alt="Zbieracz">
                <div class="shop-item-info">
                    <div class="shop-item-name">üéÅ Zbieracz Wszystkiego</div>
                    <div class="shop-item-desc">Natychmiastowo zbiera wszystkie przedmioty</div>
                </div>
                <button>Kup za 2500 DMT</button>
            </div>
            <button onclick="toggleShop()">‚ùå Zamknij</button>
        </div>
        <div class="start-screen" id="startScreen">
            <h1>üêÑ Don Mleko</h1>
            <h2>Mafia RPG</h2>
            <p>Wciel siƒô w rolƒô Don Mleka, bosa byka w ≈õwiecie mafijnym!</p>
            <p>Walcz z wrogimi szczurami i ≈õwiniami, zdobywaj do≈õwiadczenie i ulepszaj swojƒÖ postaƒá!</p>
            <button onclick="showNicknameScreen()">üéÆ Rozpocznij Grƒô</button>
            <button onclick="showHighscores()">üèÜ Najlepsze Wyniki</button>
        </div>
        <div class="nickname-screen" id="nicknameScreen">
            <h1>üêÑ Wprowad≈∫ Nick</h1>
            <p>Wpisz sw√≥j nick lub pomi≈Ñ ten krok</p>
            <input type="text" id="nicknameInput" placeholder="Tw√≥j nick (opcjonalnie)..." maxlength="15">
            <div class="error-message" id="errorMessage">Nick musi mieƒá co najmniej 3 znaki!</div>
            <br>
            <button onclick="startGameWithNick()" id="confirmButton">‚úÖ Zatwierd≈∫</button>
            <button onclick="skipNick()" class="skip-button">‚è© Pomi≈Ñ</button>
            <button onclick="backToStart()">‚ùå Wr√≥ƒá</button>
        </div>
        <div class="highscore-screen" id="highscoreScreen">
            <h1>üèÜ Najlepsze Wyniki</h1>
            <table class="highscore-table" id="highscoreTable">
                </table>
            <button onclick="backToStart()">üîô Wr√≥ƒá</button>
        </div>
        <div class="game-over-screen" id="gameOverScreen">
            <h1>üíÄ GAME OVER</h1>
            <p id="finalScore">Tw√≥j wynik: 0</p>
            <p id="highscoreMessage"></p>
            <button onclick="restartGame()">üîÑ Nowa Gra</button>
            <button onclick="showHighscores()">üèÜ Wyniki</button>
        </div>
        <div class="level-up-screen" id="levelUpScreen">
            <h1>üéâ GRATULACJE!</h1>
            <p id="levelUpText">Przechodzisz do poziomu 2!</p>
            <button onclick="continueGame()">‚û°Ô∏è Dalej</button>
        </div>
        <div class="boss-screen" id="bossScreen">
            <h1>üëë BOSS Z≈ÅODZIEJ!</h1>
            <p id="bossText">Uwa≈ºaj! Pojawi≈Ç siƒô gro≈∫ny boss Z≈Çodziej!</p>
            <p>Strzela od samego poczƒÖtku i jest bardzo niebezpieczny!</p>
            <button onclick="startBossFight()">üó°Ô∏è Walcz ze Z≈Çodziejem</button>
            <button onclick="backToStart()">üîô Wr√≥ƒá do menu</button>
        </div>
        <div class="boss-screen2" id="bossScreen2">
            <h1>üëë BOSS BOBER!</h1>
            <p id="bossText2">Uwa≈ºaj! Pojawi≈Ç siƒô potƒô≈ºny boss Bober!</p>
            <p>Strzela od samego poczƒÖtku i jest bardzo niebezpieczny!</p>
            <button onclick="startBossFight2()">üó°Ô∏è Walcz z Bobrem</button>
            <button onclick="backToStart()">üîô Wr√≥ƒá do menu</button>
        </div>
        <div class="controls">
            <div class="controls-title">üéÆ Sterowanie:</div>
            <ul class="controls-list">
                <li>WASD - Ruch postaci</li>
                <li>Mysz - Celowanie</li>
                <li>Spacja - Strza≈Ç</li>
                <li>E - Zbieranie przedmiot√≥w</li>
                <li>Q - U≈ºywanie apteczek</li>
            </ul>
        </div>
        <div class="item-counter" id="itemCounter">
            <div class="item-counter-title">üì¶ Przedmioty do zebrania:</div>
            <ul class="item-counter-list">
                <li>üí∞ <span id="tokenCount">0</span> DMT</li>
                <li>‚ù§Ô∏è <span id="potionCount">0</span> Apteczki</li>
            </ul>
        </div>
        <div class="game-message" id="gameMessage"></div>
    </div>
    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        // Global scaling factor for game elements
        const GAME_SCALE = 1.5; // Adjust this value to make characters smaller
        // Load images
        const images = {
            player: new Image(),
            rat: new Image(),
            pig: new Image(),
            wolf: new Image(),
            cow: new Image(),
            zubr: new Image(), // Added zubr image
            z≈Çodziej: new Image(), // Added z≈Çodziej image
            bober: new Image(), // Added bober image
            healthPotion: new Image(),
            bullet: new Image(),
            enemyBullet: new Image(),
            map1: new Image(),
            map2: new Image(),
            rifle: new Image(),
            shotgun: new Image(),
            autoaim: new Image(),
            speed: new Image(),
            token: new Image(), // Added token image
            thompson: new Image() // Added thompson image
        };
        images.player.src = 'boss_mleko.png';
        images.rat.src = 'szczur.png';
        images.pig.src = 'swinia.png';
        images.wolf.src = 'wilk.png';
        images.cow.src = 'krowa.png';
        images.zubr.src = 'zubr.png'; // Added zubr image
        images.z≈Çodziej.src = 'z≈Çodziej.png'; // Added z≈Çodziej image
        images.bober.src = 'bober.png'; // Added bober image
        images.healthPotion.src = 'serduszko.png';
        images.bullet.src = 'https://placehold.co/10x10/FFFF00/000000?text=.'; // Placeholder
        images.enemyBullet.src = 'https://placehold.co/8x8/FF6600/FFFFFF?text=.'; // Placeholder
        images.map1.src = 'favicon.png';
        images.map2.src = 'map2.png';
        images.rifle.src = 'https://placehold.co/40x40/FF6600/FFFFFF?text=R';
        images.shotgun.src = 'https://placehold.co/40x40/FF6600/FFFFFF?text=S';
        images.autoaim.src = 'https://placehold.co/40x40/00FF00/000000?text=AA';
        images.speed.src = 'https://placehold.co/40x40/00FFFF/000000?text=SP';
        images.token.src = 'token.png'; // Added token image
        images.thompson.src = 'https://placehold.co/40x40/FF0000/FFFFFF?text=T'; // Added thompson image
        // Wait for all images to load
        let imagesLoadedCount = 0;
        const totalImages = Object.keys(images).length;
        const loadingProgress = document.getElementById('loadingProgress');
        for (const key in images) {
            images[key].onload = () => {
                imagesLoadedCount++;
                loadingProgress.textContent = `${Math.floor((imagesLoadedCount / totalImages) * 100)}%`;
                if (imagesLoadedCount === totalImages) {
                    // All images loaded, hide loading screen and show start screen
                    document.getElementById('loadingScreen').style.display = 'none';
                    resizeCanvas(); // Initial canvas resize
                    document.getElementById('startScreen').style.display = 'block'; // Show start screen
                }
            };
            images[key].onerror = () => {
                console.error(`Failed to load image: ${images[key].src}`);
                // Continue loading other images even if one fails
                imagesLoadedCount++;
                loadingProgress.textContent = `${Math.floor((imagesLoadedCount / totalImages) * 100)}%`;
                if (imagesLoadedCount === totalImages) {
                    document.getElementById('loadingScreen').style.display = 'none';
                    resizeCanvas();
                    document.getElementById('startScreen').style.display = 'block'; // Show start screen
                }
            };
        }
        // Game state
        let gameRunning = false;
        let gameStage = 1;
        let playerNick = 'Don Mleko';
        let gameScore = 0;
        let player = {}; // Initialized in startGame
        let enemies = [];
        let bullets = [];
        let enemyBullets = [];
        let items = [];
        let keys = {};
        let mouse = { x: 0, y: 0, down: false, clicked: false };
        let canShoot = true; // Prevents rapid fire on spacebar hold
        let lastHitTime = 0; // Czas ostatniego trafienia gracza
        const hitCooldown = 1000; // Czas w ms, zanim gracz mo≈ºe zostaƒá ponownie trafiony
        // Stage configurations (enemies, spawn rates, etc)
        const stages = {
            1: {
                enemyTypes: ['rat', 'pig', 'wolf', 'cow'],
                spawnRate: 0.015,
                maxEnemies: 5,
                bgImage: images.map1,
                levelGoal: 10// Example: level needed to progress or trigger something
            },
            2: { // Example of a higher stage
                enemyTypes: ['rat', 'pig', 'wolf', 'cow'],
                spawnRate: 0.02,
                maxEnemies: 8,
                bgImage: images.map2,
                levelGoal: 27
            },
            3: { // Another example stage
                enemyTypes: ['rat', 'pig', 'wolf', 'cow'],
                spawnRate: 0.025,
                maxEnemies: 12,
                bgImage: images.map2,
                levelGoal: 1000
            }
            // Zubr is now a boss triggered by player level, not a stage
        };
        // Highscore system using localStorage
        function getHighscores() {
            const scores = JSON.parse(localStorage.getItem('donMlekoHighscores') || '[]');
            return scores.sort((a, b) => b.score - a.score).slice(0, 10);
        }
        function saveHighscore(nick, score) {
            const scores = getHighscores();
            scores.push({ nick, score, date: new Date().toLocaleDateString('pl-PL') });
            scores.sort((a, b) => b.score - a.score);
            localStorage.setItem('donMlekoHighscores', JSON.stringify(scores.slice(0, 10)));
        }
        function showHighscores() {
            const scores = getHighscores();
            const table = document.getElementById('highscoreTable');
            if (scores.length === 0) {
                table.innerHTML = '<tr><td colspan="4" style="text-align:center;">Brak wynik√≥w!</td></tr>';
            } else {
                let html = '<thead><tr><th>Rank</th><th>Nick</th><th>Wynik</th><th>Data</th></tr></thead><tbody>';
                scores.forEach((score, index) => {
                    // Check if the current game's score and player match a highscore entry
                    const isCurrentPlayer = (score.nick === playerNick && score.score === gameScore);
                    html += `<tr class="${isCurrentPlayer ? 'highscore-entry current' : 'highscore-entry'}">
                                <td>${index + 1}</td>
                                <td>${score.nick}</td>
                                <td>${score.score} pkt</td>
                                <td>${score.date}</td>
                            </tr>`;
                });
                table.innerHTML = html + '</tbody>';
            }
            document.getElementById('highscoreScreen').style.display = 'block';
        }
        function calculateScore() {
            return player.level * 100 + player.money + (gameStage - 1) * 1000;
        }
        // Event listeners
        document.addEventListener('keydown', (e) => {
            keys[e.key.toLowerCase()] = true;
            if (e.key.toLowerCase() === 'e') {
                collectItems();
            }
            // Prevent default action for space key to avoid page scrolling
            if (e.code === 'Space') {
                e.preventDefault();
            }
        });
        document.addEventListener('keyup', (e) => {
            keys[e.key.toLowerCase()] = false;
            // Reset shooting cooldown when space is released
            if (e.code === 'Space') {
                canShoot = true;
            }
        });
        canvas.addEventListener('mousemove', (e) => {
            const rect = canvas.getBoundingClientRect();
            mouse.x = e.clientX - rect.left;
            mouse.y = e.clientY - rect.top;
        });
        canvas.addEventListener('mousedown', (e) => {
            if (e.button === 0) { // Left mouse button
                mouse.down = true;
                mouse.clicked = true;
                // Prevent default to avoid text selection
                e.preventDefault();
            }
        });
        canvas.addEventListener('mouseup', (e) => {
            if (e.button === 0) {
                mouse.down = false;
                mouse.clicked = false;
            }
        });
        // Prevent text selection during gameplay
        canvas.addEventListener('selectstart', (e) => {
            e.preventDefault();
            return false;
        });
        canvas.addEventListener('dragstart', (e) => {
            e.preventDefault();
            return false;
        });
        // Touch events for mobile support
        canvas.addEventListener('touchstart', (e) => {
            e.preventDefault(); // Prevent scrolling/zooming
            const touch = e.touches[0];
            const rect = canvas.getBoundingClientRect();
            mouse.x = touch.clientX - rect.left;
            mouse.y = touch.clientY - rect.top;
            mouse.down = true;
            mouse.clicked = true;
            // Fire on touch start for mobile
            if (gameRunning) {
                shoot();
            }
        }, { passive: false });
        canvas.addEventListener('touchmove', (e) => {
            e.preventDefault(); // Prevent scrolling
            const touch = e.touches[0];
            const rect = canvas.getBoundingClientRect();
            mouse.x = touch.clientX - rect.left;
            mouse.y = touch.clientY - rect.top;
        }, { passive: false });
        canvas.addEventListener('touchend', (e) => {
            e.preventDefault(); // Prevent scrolling
            mouse.down = false;
            mouse.clicked = false;
        }, { passive: false });
        // Resize canvas to fit window
        function resizeCanvas() {
            const gameContainer = document.querySelector('.game-container');
            const containerWidth = gameContainer.offsetWidth;
            const containerHeight = gameContainer.offsetHeight;
            // Maintain aspect ratio or fill screen
            const aspectRatio = 1200 / 800; // Original aspect ratio
            let newWidth, newHeight;
            if (containerWidth / containerHeight > aspectRatio) {
                newHeight = containerHeight;
                newWidth = newHeight * aspectRatio;
            } else {
                newWidth = containerWidth;
                newHeight = newWidth / aspectRatio;
            }
            canvas.width = newWidth;
            canvas.height = newHeight;
            // Adjust canvas style for proper background image sizing
            canvas.style.width = newWidth + 'px';
            canvas.style.height = newHeight + 'px';
            // Center player position
            if (player.x === undefined || player.y === undefined) { // Only set initial position if not set
                player.x = canvas.width / 2;
                player.y = canvas.height / 2;
            }
            // Reset mouse position to center for consistent shooting direction
            mouse.x = canvas.width / 2;
            mouse.y = canvas.height / 2;
            // Redraw everything after resize
            if (gameRunning) {
                draw();
            }
        }
        // Initial canvas sizing
        window.addEventListener('resize', resizeCanvas);
        // Nick validation
        function validateNick(nick) {
            const trimmed = nick.trim();
            if (trimmed.length === 0) {
                return { valid: true, error: null }; // Empty nick is allowed (will default to Don Mleko)
            }
            if (trimmed.length < 3) {
                return { valid: false, error: 'Nick musi mieƒá co najmniej 3 znaki!' };
            }
            if (trimmed.length > 15) {
                return { valid: false, error: 'Nick mo≈ºe mieƒá maksymalnie 15 znak√≥w!' };
            }
            if (!/^[a-zA-Z0-9_\\-\\\\s]+$/.test(trimmed)) {
                return { valid: false, error: 'Nick mo≈ºe zawieraƒá tylko litery, cyfry, spacje, _ i -!' };
            }
            return { valid: true, error: null };
        }
        function showNicknameScreen() {
            document.getElementById('startScreen').style.display = 'none';
            document.getElementById('nicknameScreen').style.display = 'block';
            document.getElementById('nicknameInput').focus();
            document.getElementById('errorMessage').style.display = 'none';
        }
        function startGameWithNick() {
            const nickInput = document.getElementById('nicknameInput');
            const errorMessage = document.getElementById('errorMessage');
            const validation = validateNick(nickInput.value);
            if (!validation.valid) {
                errorMessage.textContent = validation.error;
                errorMessage.style.display = 'block';
                nickInput.focus();
                return;
            }
            const inputNick = nickInput.value.trim();
            playerNick = inputNick.length > 0 ? inputNick : 'Don Mleko';
            document.getElementById('playerNick').textContent = playerNick;
            document.getElementById('nicknameScreen').style.display = 'none';
            errorMessage.style.display = 'none';
            startGame();
        }
        function skipNick() {
            playerNick = 'Don Mleko';
            document.getElementById('playerNick').textContent = playerNick;
            document.getElementById('nicknameScreen').style.display = 'none';
            document.getElementById('errorMessage').style.display = 'none';
            startGame();
        }
        function backToStart() {
            document.getElementById('highscoreScreen').style.display = 'none';
            document.getElementById('nicknameScreen').style.display = 'none';
            document.getElementById('gameOverScreen').style.display = 'none';
            document.getElementById('startScreen').style.display = 'block';
        }
        function restartGame() {
            document.getElementById('gameOverScreen').style.display = 'none';
            startGame();
        }
        function continueGame() {
            document.getElementById('levelUpScreen').style.display = 'none';
            gameRunning = true;
            gameLoop(); // Resume game loop
        }
        function startBossFight() {
            document.getElementById('bossScreen').style.display = 'none';
            
            if (player.level === 25) {
                // To jest Zubr - koniec gry po pokonaniu
                const zubr = new Enemy('zubr', canvas.width / 2 - 60, canvas.height / 2 - 60);
                enemies.push(zubr);
                
                // Dodaj specjalny handler dla Zubra
                enemies[enemies.length - 1].onDeath = function() {
                    endGame();
                };
            } else {
                // Normalny boss Z≈Çodziej
                spawnBoss();
            }
            
            gameRunning = true;
            gameLoop();
        }
        function startBossFight2() {
            document.getElementById('bossScreen2').style.display = 'none';
            spawnBoss2();
            gameRunning = true;
            gameLoop();
        }
        function showGameMessage(message, duration = 2000) {
            const msgElement = document.getElementById('gameMessage');
            msgElement.textContent = message;
            msgElement.style.display = 'block';
            setTimeout(() => {
                msgElement.style.display = 'none';
            }, duration);
        }
        // Game objects
        function Player() {
            this.width = 50 * GAME_SCALE;
            this.height = 50 * GAME_SCALE;
            this.x = canvas.width / 2 - this.width / 2;
            this.y = canvas.height / 2 - this.height / 2;
            this.speed = 5;
            this.maxHealth = 100;
            this.health = this.maxHealth;
            this.damage = 15;
            this.bulletSpeed = 10;
            this.fireRate = 200; // ms between shots
            this.lastShot = 0;
            this.level = 1;
            this.exp = 0;
            this.expToNextLevel = 100;
            this.money = 0;
            this.weapon = 'Pistolet';
            this.autoAim = false;
            this.healthPotions = 0;
            this.currentWeaponImage = images.rifle; // Default image for pistol
            this.isHit = false; // Flag for hit effect
            this.hitAnimationTimer = 0;
            this.hitAnimationDuration = 100; // ms for hit animation
        }
        Player.prototype.draw = function() {
            ctx.save();
            ctx.translate(this.x + this.width / 2, this.y + this.height / 2);
            // Rotate player towards mouse
            const angle = Math.atan2(mouse.y - (this.y + this.height / 2), mouse.x - (this.x + this.width / 2));
            ctx.rotate(angle);
            // Apply hit effect
            if (this.isHit) {
                ctx.filter = 'brightness(200%) hue-rotate(180deg)'; // Red tint for hit
            }
            
            ctx.drawImage(images.player, -this.width / 2, -this.height / 2, this.width, this.height);
            
            ctx.filter = 'none'; // Reset filter
            ctx.restore();
            // Draw weapon if equipped (basic placeholder for now)
            if (this.weapon !== 'Pistolet' && this.currentWeaponImage) {
                ctx.save();
                ctx.translate(this.x + this.width / 2, this.y + this.height / 2);
                ctx.rotate(angle);
                // Position weapon next to player (adjust offsets as needed)
                ctx.drawImage(this.currentWeaponImage, this.width / 2, -10 * GAME_SCALE, 30 * GAME_SCALE, 10 * GAME_SCALE);
                ctx.restore();
            }
        };
        Player.prototype.update = function(deltaTime) {
            let moved = false;
            if (keys['w']) { this.y -= this.speed; moved = true; }
            if (keys['s']) { this.y += this.speed; moved = true; }
            if (keys['a']) { this.x -= this.speed; moved = true; }
            if (keys['d']) { this.x += this.speed; moved = true; }
            // Keep player within canvas bounds
            this.x = Math.max(0, Math.min(canvas.width - this.width, this.x));
            this.y = Math.max(0, Math.min(canvas.height - this.height, this.y));
            // Shooting
            const now = Date.now();
            if ((keys[' '] || mouse.down) && (now - this.lastShot > this.fireRate)) {
                shoot();
                this.lastShot = now;
            }
            // Update hit animation
            if (this.isHit) {
                this.hitAnimationTimer += deltaTime;
                if (this.hitAnimationTimer >= this.hitAnimationDuration) {
                    this.isHit = false;
                    this.hitAnimationTimer = 0;
                }
            }
            // UI updates
            document.getElementById('health').textContent = `${this.health}`;
            document.getElementById('healthBar').style.width = `${(this.health / this.maxHealth) * 100}%`;
            document.getElementById('level').textContent = this.level;
            document.getElementById('exp').textContent = `${this.exp}`;
            document.getElementById('expToNext').textContent = this.expToNextLevel;
            document.getElementById('money').textContent = this.money;
            document.getElementById('stage').textContent = gameStage;
            document.getElementById('weapon').textContent = this.weapon;
            document.getElementById('score').textContent = gameScore;
        };
        Player.prototype.takeDamage = function(amount) {
            if (Date.now() - lastHitTime < hitCooldown) {
                return; // Player is on cooldown, cannot take damage
            }
            this.health -= amount;
            this.isHit = true; // Activate hit animation
            this.hitAnimationTimer = 0; // Reset timer for animation
            lastHitTime = Date.now();
            if (this.health <= 0) {
                this.health = 0;
                gameOver();
            }
        };
        Player.prototype.addExp = function(amount) {
            this.exp += amount;
            gameScore += amount; // Add exp to score
            if (this.exp >= this.expToNextLevel) {
                this.levelUp();
            }
        };
        Player.prototype.levelUp = function() {
            this.level++;
            this.maxHealth += 20;
            this.health = this.maxHealth; // Restore health on level up
            this.damage += 5;
            this.exp = 0;
            this.expToNextLevel = Math.floor(this.expToNextLevel * 1.5);
            this.speed += 0.2; // Small speed boost
            // Progress to next stage if conditions met
            if (this.level >= stages[gameStage].levelGoal && stages[gameStage + 1]) {
                gameStage++;
                document.getElementById('stage').textContent = gameStage;
                document.getElementById('levelUpText').textContent = `Przechodzisz do poziomu ${this.level} i Etapu ${gameStage}!`;
                document.getElementById('levelUpScreen').style.display = 'block';
                gameRunning = false; // Pause game for level up screen
            } else if (this.level % 25 === 0) { // Trigger boss every 25 levels
                document.getElementById('bossText').textContent = `Uwa≈ºaj! Pojawi≈Ç siƒô potƒô≈ºny boss Zubr na poziomie ${this.level}!`;
                document.getElementById('bossScreen').style.display = 'block';
                gameRunning = false; // Pause game for boss screen
            } else if (this.level === 8) { // Boss at level 8
                document.getElementById('bossText').textContent = `Uwa≈ºaj! Pojawi≈Ç siƒô gro≈∫ny boss Z≈Çodziej na poziomie ${this.level}!`;
                document.getElementById('bossScreen').style.display = 'block';
                gameRunning = false; // Pause game for boss screen
            } else if (this.level === 12) { // Boss at level 12
                document.getElementById('bossText2').textContent = `Uwa≈ºaj! Pojawi≈Ç siƒô potƒô≈ºny boss Bober na poziomie ${this.level}!`;
                document.getElementById('bossScreen2').style.display = 'block';
                gameRunning = false; // Pause game for boss screen
            } else {
                document.getElementById('levelUpText').textContent = `Przechodzisz do poziomu ${this.level}!`;
                document.getElementById('levelUpScreen').style.display = 'block';
                gameRunning = false; // Pause game for level up screen
            }
            
            // Przej≈õcie do etapu 2 po pokonaniu Bobra
            if (this.level === 13) {
                gameStage = 2;
                document.getElementById('stage').textContent = gameStage;
            }
        };
        function Enemy(type, x, y) {
            this.type = type;
            this.x = x;
            this.y = y;
            this.markedForDeletion = false; // Flag to remove enemy
            switch (type) {
                case 'rat':
                    this.image = images.rat;
                    this.width = 40 * GAME_SCALE;
                    this.height = 40 * GAME_SCALE;
                    this.speed = 1.5;
                    this.health = 30;
                    this.maxHealth = 30;
                    this.damage = 5; // Damage dealt by touching player
                    this.expValue = 10;
                    this.moneyDrop = 5;
                    this.canShoot = false;
                    break;
                case 'pig':
                    this.image = images.pig;
                    this.width = 60 * GAME_SCALE;
                    this.height = 60 * GAME_SCALE;
                    this.speed = 1;
                    this.health = 100;
                    this.maxHealth = 100;
                    this.damage = 10;
                    this.expValue = 20;
                    this.moneyDrop = 10;
                    this.canShoot = false;
                    break;
                case 'wolf':
                    this.image = images.wolf;
                    this.width = 55 * GAME_SCALE;
                    this.height = 55 * GAME_SCALE;
                    this.speed = 2;
                    this.health = 120;
                    this.maxHealth = 120;
                    this.damage = 15;
                    this.expValue = 35;
                    this.moneyDrop = 12;
                    this.canShoot = false;
                    break;
                case 'cow':
                    this.image = images.cow;
                    this.width = 70 * GAME_SCALE;
                    this.height = 70 * GAME_SCALE;
                    this.speed = 0.8;
                    this.health = 150;
                    this.maxHealth = 150;
                    this.damage = 20;
                    this.expValue = 55;
                    this.moneyDrop = 15;
                    this.canShoot = true; // Cows can shoot
                    this.fireRate = 1500; // 1.5 seconds
                    this.lastShot = 0;
                    this.bulletSpeed = 5;
                    break;
                case 'zubr': // Boss
                    this.image = images.zubr;
                    this.width = 120 * GAME_SCALE;
                    this.height = 120 * GAME_SCALE;
                    this.speed = 0.5;
                    this.health = 50000;
                    this.maxHealth = 50000;
                    this.damage = 30;
                    this.expValue = 5000;
                    this.moneyDrop = 1000;
                    this.isBoss = true;
                    this.canShoot = true; // Zubr can shoot
                    this.fireRate = 1000; // 1 second
                    this.lastShot = 0;
                    this.bulletSpeed = 7;
                    break;
                case 'z≈Çodziej': // Boss at level 8
                    this.image = images.z≈Çodziej;
                    this.width = 100 * GAME_SCALE;
                    this.height = 100 * GAME_SCALE;
                    this.speed = 0.7;
                    this.health = 30000;
                    this.maxHealth = 30000;
                    this.damage = 25;
                    this.expValue = 3000;
                    this.moneyDrop = 800;
                    this.isBoss = true;
                    this.canShoot = true;
                    this.fireRate = 800; // 0.8 seconds
                    this.lastShot = 0;
                    this.bulletSpeed = 6;
                    break;
                case 'bober': // Boss at level 12
                    this.image = images.bober;
                    this.width = 110 * GAME_SCALE;
                    this.height = 110 * GAME_SCALE;
                    this.speed = 0.6;
                    this.health = 40000;
                    this.maxHealth = 40000;
                    this.damage = 35;
                    this.expValue = 4000;
                    this.moneyDrop = 1020;
                    this.isBoss = true;
                    this.canShoot = true;
                    this.fireRate = 1200; // 1.2 seconds
                    this.lastShot = 0;
                    this.bulletSpeed = 8;
                    break;
            }
        }
        Enemy.prototype.draw = function() {
            ctx.drawImage(this.image, this.x, this.y, this.width, this.height);
            // Draw health bar for enemies
            const barWidth = this.width;
            const barHeight = 5;
            const barX = this.x;
            const barY = this.y - 10;
            ctx.fillStyle = '#333';
            ctx.fillRect(barX, barY, barWidth, barHeight);
            ctx.fillStyle = 'red';
            ctx.fillRect(barX, barY, (this.health / this.maxHealth) * barWidth, barHeight);
            ctx.strokeStyle = '#555';
            ctx.lineWidth = 1;
            ctx.strokeRect(barX, barY, barWidth, barHeight);
        };
        Enemy.prototype.update = function() {
            // Move towards player
            const dx = player.x - this.x;
            const dy = player.y - this.y;
            const distance = Math.sqrt(dx * dx + dy * dy);
            if (distance > this.speed) {
                this.x += (dx / distance) * this.speed;
                this.y += (dy / distance) * this.speed;
            }
            // Enemy shooting
            if (this.canShoot && Date.now() - this.lastShot > this.fireRate) {
                const angle = Math.atan2(player.y - this.y, player.x - this.x);
                enemyBullets.push(new Bullet(this.x + this.width / 2, this.y + this.height / 2, Math.cos(angle) * this.bulletSpeed, Math.sin(angle) * this.bulletSpeed, 'enemy', 10, this.damage));
                this.lastShot = Date.now();
            }
            // Check for collision with player
            if (this.intersects(player) && Date.now() - lastHitTime > hitCooldown) {
                player.takeDamage(this.damage);
                // Remove enemy after hit if it's not a boss
                if (!this.isBoss) {
                    this.markedForDeletion = true; 
                    showGameMessage(`Straci≈Çe≈õ ${this.damage} HP od ${this.type}!`, 500);
                } else {
                    showGameMessage(`Boss zada≈Ç ${this.damage} HP obra≈ºe≈Ñ!`, 500);
                }
            }
        };
        Enemy.prototype.takeDamage = function(amount) {
            this.health -= amount;
            if (this.health <= 0) {
                this.markedForDeletion = true;
                player.addExp(this.expValue);
                player.money += this.moneyDrop;
                gameScore += this.expValue; // Add enemy exp to overall score
                dropItem(this.x + this.width / 2, this.y + this.height / 2);
            }
        };
        // General collision detection function
        Enemy.prototype.intersects = function(other) {
            return this.x < other.x + other.width &&
                   this.x + this.width > other.x &&
                   this.y < other.y + other.height &&
                   this.y + this.height > other.y;
        };
        function Bullet(x, y, dx, dy, type, radius, damage) {
            this.x = x;
            this.y = y;
            this.dx = dx;
            this.dy = dy;
            this.radius = radius;
            this.damage = damage;
            this.type = type; // 'player' or 'enemy'
        }
        Bullet.prototype.draw = function() {
            ctx.fillStyle = this.type === 'player' ? 'yellow' : 'orange';
            ctx.beginPath();
            ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
            ctx.fill();
            ctx.strokeStyle = '#555';
            ctx.lineWidth = 1;
            ctx.stroke();
        };
        Bullet.prototype.update = function() {
            this.x += this.dx;
            this.y += this.dy;
            // Check for collision with enemies (player bullets)
            if (this.type === 'player') {
                for (let i = enemies.length - 1; i >= 0; i--) {
                    if (this.intersects(enemies[i])) {
                        enemies[i].takeDamage(this.damage);
                        this.markedForDeletion = true;
                        break;
                    }
                }
            }
            // Check for collision with player (enemy bullets)
            if (this.type === 'enemy' && this.intersects(player)) {
                player.takeDamage(this.damage);
                this.markedForDeletion = true;
            }
            // Remove bullets that go off screen
            if (this.x < 0 || this.x > canvas.width || this.y < 0 || this.y > canvas.height) {
                this.markedForDeletion = true;
            }
        };
        // Bullet collision detection
        Bullet.prototype.intersects = function(other) {
            // Simple circle-rectangle collision
            const closestX = Math.max(other.x, Math.min(this.x, other.x + other.width));
            const closestY = Math.max(other.y, Math.min(this.y, other.y + other.height));
            const distanceX = this.x - closestX;
            const distanceY = this.y - closestY;
            const distance = Math.sqrt(distanceX * distanceX + distanceY * distanceY);
            return distance < this.radius;
        };
        function Item(x, y, type) {
            this.x = x;
            this.y = y;
            this.type = type;
            this.width = 30 * GAME_SCALE;
            this.height = 30 * GAME_SCALE;
            this.markedForDeletion = false;
            this.animationTimer = 0;
            this.animationDuration = 1000; // 1 second animation cycle
            
            switch(type) {
                case 'health':
                    this.image = images.healthPotion;
                    this.value = 50; // Health restored
                    break;
                case 'money':
                    this.image = images.token;
                    this.value = 10; // Money value
                    break;
            }
        }
        Item.prototype.draw = function() {
            ctx.save();
            // Add floating animation
            this.animationTimer += 16; // Approximately 60fps
            const yOffset = Math.sin(this.animationTimer / 200) * 3; // Small up-down movement
            
            ctx.drawImage(this.image, this.x, this.y + yOffset, this.width, this.height);
            
            // Add glow effect
            ctx.shadowColor = 'rgba(255, 255, 0, 0.5)';
            ctx.shadowBlur = 10;
            ctx.drawImage(this.image, this.x, this.y + yOffset, this.width, this.height);
            
            ctx.restore();
        };
        Item.prototype.update = function() {
            // Check for collision with player
            if (this.intersects(player)) {
                this.markedForDeletion = true;
                
                if (this.type === 'health') {
                    player.health = Math.min(player.maxHealth, player.health + this.value);
                    showGameMessage(`+${this.value} HP`, 1000);
                } else if (this.type === 'money') {
                    player.money += this.value;
                    showGameMessage(`+${this.value} DMT`, 1000);
                }
            }
        };
        Item.prototype.intersects = function(other) {
            return this.x < other.x + other.width &&
                   this.x + this.width > other.x &&
                   this.y < other.y + other.height &&
                   this.y + this.height > other.y;
        };
        function shoot() {
            if (!canShoot) return;
            
            const angle = Math.atan2(mouse.y - (player.y + player.height / 2), mouse.x - (player.x + player.width / 2));
            let bulletSpeed = player.bulletSpeed;
            let damage = player.damage;
            
            // Apply weapon damage multipliers
            if (player.weapon === 'Karabin') {
                damage *= 1.5;
            } else if (player.weapon === 'Shotgun') {
                damage *= 2;
                // Shotgun fires multiple bullets
                for (let i = 0; i < 5; i++) {
                    const spreadAngle = angle + (Math.random() - 0.5) * 0.5;
                    bullets.push(new Bullet(
                        player.x + player.width / 2,
                        player.y + player.height / 2,
                        Math.cos(spreadAngle) * bulletSpeed,
                        Math.sin(spreadAngle) * bulletSpeed,
                        'player',
                        8,
                        damage * 0.5
                    ));
                }
                return; // Skip the normal bullet creation for shotgun
            } else if (player.weapon === 'Thompson') {
                damage *= 3;
                // Thompson fires faster
                bulletSpeed *= 1.5;
            }
            
            bullets.push(new Bullet(
                player.x + player.width / 2,
                player.y + player.height / 2,
                Math.cos(angle) * bulletSpeed,
                Math.sin(angle) * bulletSpeed,
                'player',
                8,
                damage
            ));
        }
        function collectItems() {
            let collected = 0;
            for (let i = items.length - 1; i >= 0; i--) {
                if (items[i].intersects(player)) {
                    if (items[i].type === 'health') {
                        player.health = Math.min(player.maxHealth, player.health + items[i].value);
                        showGameMessage(`+${items[i].value} HP`, 1000);
                        collected++;
                    } else if (items[i].type === 'money') {
                        player.money += items[i].value;
                        showGameMessage(`+${items[i].value} DMT`, 1000);
                        collected++;
                    }
                    items[i].markedForDeletion = true;
                }
            }
            if (collected > 0) {
                showGameMessage(`Zebrano ${collected} przedmiot√≥w!`, 1500);
            }
        }
        function dropItem(x, y) {
            // 50% chance to drop health potion, 50% chance to drop money
            const type = Math.random() < 0.5 ? 'health' : 'money';
            items.push(new Item(x - 15, y - 15, type));
        }
        function spawnEnemy() {
            if (enemies.length >= stages[gameStage].maxEnemies) return;
            
            const spawnRate = stages[gameStage].spawnRate;
            if (Math.random() < spawnRate) {
                const enemyTypes = stages[gameStage].enemyTypes;
                const type = enemyTypes[Math.floor(Math.random() * enemyTypes.length)];
                
                // Spawn enemy at random edge of the screen
                let x, y;
                const side = Math.floor(Math.random() * 4); // 0: top, 1: right, 2: bottom, 3: left
                
                switch(side) {
                    case 0: // top
                        x = Math.random() * canvas.width;
                        y = -50;
                        break;
                    case 1: // right
                        x = canvas.width + 50;
                        y = Math.random() * canvas.height;
                        break;
                    case 2: // bottom
                        x = Math.random() * canvas.width;
                        y = canvas.height + 50;
                        break;
                    case 3: // left
                        x = -50;
                        y = Math.random() * canvas.height;
                        break;
                }
                
                enemies.push(new Enemy(type, x, y));
            }
        }
        function spawnBoss() {
            // Spawn boss Zubr at random edge
            let x, y;
            const side = Math.floor(Math.random() * 4);
            
            switch(side) {
                case 0: // top
                    x = Math.random() * canvas.width;
                    y = -150;
                    break;
                case 1: // right
                    x = canvas.width + 150;
                    y = Math.random() * canvas.height;
                    break;
                case 2: // bottom
                    x = Math.random() * canvas.width;
                    y = canvas.height + 150;
                    break;
                case 3: // left
                    x = -150;
                    y = Math.random() * canvas.height;
                    break;
            }
            
            enemies.push(new Enemy('zubr', x, y));
        }
        function spawnBoss2() {
            // Spawn boss Bober at random edge
            let x, y;
            const side = Math.floor(Math.random() * 4);
            
            switch(side) {
                case 0: // top
                    x = Math.random() * canvas.width;
                    y = -150;
                    break;
                case 1: // right
                    x = canvas.width + 150;
                    y = Math.random() * canvas.height;
                    break;
                case 2: // bottom
                    x = Math.random() * canvas.width;
                    y = canvas.height + 150;
                    break;
                case 3: // left
                    x = -150;
                    y = Math.random() * canvas.height;
                    break;
            }
            
            enemies.push(new Enemy('bober', x, y));
        }
        function draw() {
            // Clear canvas
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            // Draw background
            ctx.drawImage(stages[gameStage].bgImage, 0, 0, canvas.width, canvas.height);
            
            // Draw items
            items.forEach(item => item.draw());
            
            // Draw bullets
            bullets.forEach(bullet => bullet.draw());
            enemyBullets.forEach(bullet => bullet.draw());
            
            // Draw enemies
            enemies.forEach(enemy => enemy.draw());
            
            // Draw player
            player.draw();
            
            // Draw UI overlay (health bar, etc.)
            // This is handled by the HTML elements, not canvas
        }
        function update() {
            // Spawn enemies
            spawnEnemy();
            
            // Update player
            player.update();
            
            // Update enemies
            enemies.forEach(enemy => enemy.update());
            
            // Update bullets
            bullets.forEach(bullet => bullet.update());
            enemyBullets.forEach(bullet => bullet.update());
            
            // Update items
            items.forEach(item => item.update());
            
            // Remove marked objects
            enemies = enemies.filter(enemy => !enemy.markedForDeletion);
            bullets = bullets.filter(bullet => !bullet.markedForDeletion);
            enemyBullets = enemyBullets.filter(bullet => !bullet.markedForDeletion);
            items = items.filter(item => !item.markedForDeletion);
        }
        function gameLoop() {
            if (!gameRunning) return;
            
            update();
            draw();
            requestAnimationFrame(gameLoop);
        }
        function startGame() {
            // Reset game state
            gameRunning = true;
            gameStage = 1;
            gameScore = 0;
            player = new Player();
            enemies = [];
            bullets = [];
            enemyBullets = [];
            items = [];
            
            // Update UI
            document.getElementById('playerNick').textContent = playerNick;
            document.getElementById('health').textContent = player.health;
            document.getElementById('healthBar').style.width = '100%';
            document.getElementById('level').textContent = player.level;
            document.getElementById('exp').textContent = player.exp;
            document.getElementById('expToNext').textContent = player.expToNextLevel;
            document.getElementById('money').textContent = player.money;
            document.getElementById('stage').textContent = gameStage;
            document.getElementById('weapon').textContent = player.weapon;
            document.getElementById('score').textContent = gameScore;
            
            // Start game loop
            gameLoop();
        }
        function gameOver() {
            gameRunning = false; // Stop game loop
            
            // Calculate final score
            const finalScore = calculateScore();
            
            // Update game over screen
            document.getElementById('finalScore').textContent = `Tw√≥j wynik: ${finalScore}`;
            
            // Check if highscore
            const highscores = getHighscores();
            let isHighscore = false;
            if (highscores.length < 10 || finalScore > highscores[highscores.length - 1].score) {
                isHighscore = true;
                document.getElementById('highscoreMessage').textContent = 'Gratulacje! To jest nowy rekord!';
                saveHighscore(playerNick, finalScore);
            } else {
                document.getElementById('highscoreMessage').textContent = 'Mo≈ºe‰∏ãÊ¨°‰ºöÊõ¥Â•Ω!';
            }
            
            // Show game over screen
            document.getElementById('gameOverScreen').style.display = 'block';
        }
        function buyItem(itemType, price) {
            if (player.money < price) {
                showGameMessage(`Brak wystarczajƒÖcej ilo≈õci DMT! Potrzebujesz ${price - player.money} wiƒôcej.`, 2000);
                return;
            }
            
            player.money -= price;
            
            switch(itemType) {
                case 'rifle':
                    player.damage += 10;
                    player.weapon = 'Karabin';
                    player.currentWeaponImage = images.rifle;
                    showGameMessage('Kupiono Karabin! Damage +10', 2000);
                    break;
                case 'shotgun':
                    player.damage += 20;
                    player.weapon = 'Shotgun';
                    player.currentWeaponImage = images.shotgun;
                    showGameMessage('Kupiono Shotgun! Damage +20', 2000);
                    break;
                case 'autoaim':
                    player.autoAim = true;
                    player.currentWeaponImage = images.autoaim;
                    showGameMessage('Kupiono Auto-Aim!', 2000);
                    break;
                case 'speed':
                    player.fireRate = Math.max(50, player.fireRate - 50);
                    player.currentWeaponImage = images.speed;
                    showGameMessage('Zwiƒôkszono szybko≈õƒá strza≈Ç√≥w!', 2000);
                    break;
                case 'health':
                    player.health = Math.min(player.maxHealth, player.health + 50);
                    showGameMessage('+50 HP!', 2000);
                    break;
                case 'thompson':
                    player.damage += 50;
                    player.weapon = 'Thompson';
                    player.currentWeaponImage = images.thompson;
                    showGameMessage('Kupiono Thompson! Damage +50', 2000);
                    break;
                case 'collect':
                    // Implement collect all items functionality
                    let count = 0;
                    items.forEach(item => {
                        if (item.type === 'money') {
                            player.money += item.value;
                            count++;
                        } else if (item.type === 'health') {
                            player.health = Math.min(player.maxHealth, player.health + item.value);
                            count++;
                        }
                        item.markedForDeletion = true;
                    });
                    showGameMessage(`Zebrano wszystkie przedmioty! +${count} przedmiot√≥w`, 2000);
                    break;
            }
            
            // Update UI
            document.getElementById('money').textContent = player.money;
            document.getElementById('weapon').textContent = player.weapon;
            document.getElementById('health').textContent = player.health;
            document.getElementById('healthBar').style.width = `${(player.health / player.maxHealth) * 100}%`;
        }
        function toggleShop() {
            const shop = document.getElementById('shopOverlay');
            shop.style.display = shop.style.display === 'block' ? 'none' : 'block';
        }
    </script>
</body>
</html>